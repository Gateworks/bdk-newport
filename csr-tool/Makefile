# ***********************license start***********************************
# Copyright (C) 2018 Marvell International Ltd.
# SPDX-License-Identifier: BSD-3-Clause
# https://spdx.org/licenses
# **********************license end**************************************

SVNROOT?=svn+ssh://masvn/svn
ifeq ($(shell hostname),chad-virtualbox)
    HTTPROOT=~/work/thunder/csrs-html
else
    HTTPROOT=/var/www/html/csr-html
endif

.NOTPARALLEL:
.PHONY: help
.DEFAULT: help
.SILENT: help
help:
	echo ""
	echo "Tool to generate files from YAML CSR files"
	echo ""
	echo "Targets:"
	echo "    fetch:        Fetch YAML from tiger01:work/csr/*.yaml"
	echo "    generate:     Read in the YAML and generate all output files"
	echo "    copy-html:    Copy html files to $(HTTPROOT)"
	echo "    copy-headers: Copy all generated files into their correct locations"
	echo "    copy: Do both copy-html and copy-headers"
	echo "    all:          Do fetch, generate, and copy"
	echo "    clean:        Clean generated and downloaded files"
	echo ""
	echo "Note:"
	echo "  * The YAML files fetched are generated by Makefile.csr-cluster"
	echo "    run on the MA cluster (tiger01). This uses csr3 to simplify"
	echo "    the YAML before this file uses it."
	echo "  * All CSRs in a chip are in one big YAML file."
	echo "  * YAML files are named by chip and pass. See the yaml dir after fetch."
	echo "  * chip_list.py has all the chip and pass info."
	echo ""

.PHONY: all
all: fetch generate copy

.PHONY: fetch
fetch: clean fetch-gsern fetch-rambus
	rm -rf yaml
	mkdir yaml
	scp -C tiger01:/nfs/dv32/kreese/work/csr/*.yaml yaml/
	# Fixups for CN70XX
	sed -i "s/SMI\\([0-9(]\\)/SMI_\\1/g" yaml/o70*.yaml
	# Fixups for CN73XX
	sed -i "s/CIU3_/CIU_/g" yaml/o73*.yaml
	# Fixups for CNF75XX
	sed -i "s/CIU3_/CIU_/g" yaml/o75*.yaml
	# Fixups for CN78XX
	sed -i "s/CIU3_/CIU_/g" yaml/o78*.yaml
	# Fixups for CNF95XX
	# The hardware team removed the PEM index from the PCIe config
	# registers. The BDK needs this to determine which PEM you are
	# accessing.
	sed -i "s/name: PCIEEP_/name: PCIEEP(0)_/g" yaml/t95*.yaml
	sed -i "s/name: PCIEEPVF_/name: PCIEEPVF(0)_/g" yaml/t95*.yaml
	sed -i "s/name: PCIERC_/name: PCIERC(0)_/g" yaml/t95*.yaml
	# Fixups for CN96XX
	# The hardware team removed the PEM index from the PCIe config
	# registers. The BDK needs this to determine which PEM you are
	# accessing.
	sed -i "s/name: PCIEEP_/name: PCIEEP(0..3)_/g" yaml/t96*.yaml
	sed -i "s/name: PCIEEPVF_/name: PCIEEPVF(0..3)_/g" yaml/t96*.yaml
	sed -i "s/name: PCIERC_/name: PCIERC(0..3)_/g" yaml/t96*.yaml
	# CN96XX CIM shows 48 cores instead of the correct 24
	sed -i "s/CIM[(]0\.\.47[)]/CIM(0..23)/g" yaml/t96_pass_3.0.yaml
	# Fixups for CN98XX
	# The hardware team removed the PEM index from the PCIe config
	# registers. The BDK needs this to determine which PEM you are
	# accessing.
	sed -i "s/name: PCIEEP_/name: PCIEEP(0..4)_/g" yaml/t98*.yaml
	sed -i "s/name: PCIEEPVF_/name: PCIEEPVF(0..4)_/g" yaml/t98*.yaml
	sed -i "s/name: PCIERC_/name: PCIERC(0..4)_/g" yaml/t98*.yaml
	# Fixups for LOKI
	# The hardware team removed the PEM index from the PCIe config
	# registers. The BDK needs this to determine which PEM you are
	# accessing.
	sed -i "s/name: PCIEEP_/name: PCIEEP(0)_/g" yaml/loki*.yaml
	sed -i "s/name: PCIEEPVF_/name: PCIEEPVF(0)_/g" yaml/loki*.yaml
	sed -i "s/name: PCIERC_/name: PCIERC(0)_/g" yaml/loki*.yaml
	# Fix AP_TRCIDRX for all ARM chips
	sed -i "s/[(][(]8-[(][(]a>>3[)]<<3[)]|(a&7))<<16/(((8-((a>>3)<<3))|(a\&7))<<16/g" yaml/t*.yaml yaml/loki*.yaml

.PHONY: generate
generate: clean-output generate-gsern
	mkdir -p html output output/octeon output/thunder output/octeontx
	cp sorttable.js html/
	cp csr.css html/
	./csr-tool.py

.PHONY: copy-headers
copy-headers:
	rm -f $(wildcard ../libbdk-arch/bdk-csrs-*.h)
	mv output/octeontx/bdk-csrs*.h ../libbdk-arch/
	mv output/octeontx/bdk-csrs.c ../libbdk-arch/
	mv output/octeontx/cavm-gsern-settings.h ../libcavm-gsern/

.PHONY: copy-html
copy-html:
	rm -rf $(HTTPROOT)
	mv html $(HTTPROOT)
	chmod -R o+r $(HTTPROOT)

.PHONY: copy
copy: copy-headers copy-html

.PHONY: fetch-gsern
fetch-gsern:
	rm -rf t93_config_spreadsheets
	svn export -q $(SVNROOT)/t93/trunk/docs/plm_config_spreadsheets t93_config_spreadsheets
	rm -rf t95_config_spreadsheets
	svn export -q $(SVNROOT)/t95/trunk/docs/plm_config_spreadsheets t95_config_spreadsheets

.PHONY: generate-gsern
generate-gsern: clean-output
	mkdir -p output/octeontx
	python2 ../utils/scripts/bdk-parse-gsern-xlsx.py

.PHONY: fetch-rambus
fetch-rambus:
	mkdir -p output/octeontx
	rm -f output/octeontx/*.ihex
	# GSERP firmware
	svn export -q $(SVNROOT)/t93/trunk/rtl/rambus_sonora/pipe_phy/digital/firmware/pipe_phy_fw.ihex output/octeontx/gserp-firm-cn96xx.ihex
	svn export -q $(SVNROOT)/f95n/trunk/rtl/rambus_sonora/pipe_phy/digital/firmware/pipe_phy_fw.ihex output/octeontx/gserp-firm-loki.ihex
	svn export -q $(SVNROOT)/t98/trunk/rtl/rambus_sonora/pipe_phy/digital/firmware/pipe_phy_fw.ihex output/octeontx/gserp-firm-cn98xx.ihex
	objcopy -I ihex -O binary output/octeontx/gserp-firm-cn96xx.ihex ../target-bin/gserp-cn96xx.frm
	objcopy -I ihex -O binary output/octeontx/gserp-firm-loki.ihex ../target-bin/gserp-loki.frm
	objcopy -I ihex -O binary output/octeontx/gserp-firm-cn98xx.ihex ../target-bin/gserp-cn98xx.frm
	# GSERR firmware
	svn export -q $(SVNROOT)/t93/trunk/verif/vkits/salina/firmware/hex_files/rbphys2a1s14lpp28gXl1c_fw.ihex output/octeontx/gserr-firm-cn96xx.ihex
	svn export -q $(SVNROOT)/t95/trunk/verif/vkits/salina/firmware/hex_files/rbphys2a1s14lpp28gXl1c_fw.ihex output/octeontx/gserr-firm-cnf95xx.ihex
	svn export -q $(SVNROOT)/f95n/trunk/verif/vkits/salina/firmware/hex_files/rbphys2a1s14lpp28gXl1c_fw.ihex output/octeontx/gserr-firm-loki.ihex
	svn export -q $(SVNROOT)/t98/trunk/verif/vkits/salina/firmware/hex_files/rbphys2a1s14lpp28gXl1c_fw.ihex output/octeontx/gserr-firm-cn98xx.ihex
	objcopy -I ihex -O binary output/octeontx/gserr-firm-cn96xx.ihex ../target-bin/gserr-cn96xx.frm
	objcopy -I ihex -O binary output/octeontx/gserr-firm-cnf95xx.ihex ../target-bin/gserr-cnf95xx.frm
	objcopy -I ihex -O binary output/octeontx/gserr-firm-loki.ihex ../target-bin/gserr-loki.frm
	objcopy -I ihex -O binary output/octeontx/gserr-firm-cn98xx.ihex ../target-bin/gserr-cn98xx.frm
	# GSERC firmware
	svn export -q $(SVNROOT)/f95n/trunk/verif/vkits/salina/firmware/hex_files/rbphys2a1s14lpp28g2l1c_fw.ihex output/octeontx/gserc-firm-loki.ihex
	objcopy -I ihex -O binary output/octeontx/gserc-firm-loki.ihex ../target-bin/gserc-loki.frm

.PHONY: clean-output
clean-output:
	rm -rf output html
.PHONY: clean
clean: clean-output
	rm -rf yaml *.pickle *.pyc

