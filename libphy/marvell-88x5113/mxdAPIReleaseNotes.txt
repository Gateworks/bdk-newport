Copyright (c) 2014 - 2018 Marvell Semiconductor Inc.

Confidential. All rights reserved. 

This publication and its contents are proprietary to Marvell. No part of this publication may be reproduced in any form or by any means without the written permission of Marvell Semiconductor Inc.

Release Notes for Marvell 88X5113 PHY API.


Instructions
------------
This source code is provided as a function library for configuring/controlling and querying status of the Marvell 88X5113 PHY. 

The header files (e.g. mxdAPI.h) together with the API Application Notes and datasheet comprise the documentation for using this API to interface to the PHY.

Refer to the spreadsheet, 'mxdAPI summary.xlsx' for a complete list of API functions and descriptions.

All C files in the top level and serdes subdirectory except mxdHwCntl.c are designed to be compiled/linked with the host processor's code as-is. 

The file mxdHwCntl.c is meant to be specific to the host processor's hardware and may need to be modified accordingly. The sample code in the hardware-specific files contains code which was used to test the API and was compiled/linked with a test program using MSVC and executed on a Window's-based PC to access a USB-to-MDIO interface in order to test with the PHY evaluation board. 

The function mxdInitDriver() is designed to download the firmware and serdes images and allow initializing the driver with function pointers for the host's MDIO read/write functions without having to modify any API code. (NOTE: mxdWait() must always be ported to the host's environment).  The Z80 firmware, SBUS master and SERDES images are used during firmware download in the mxdInitDriver() function. Refer to the mxdInitialization.h for more detailed information on the mxdInitDriver() usage.

The function mxdUnloadDriver() performs the clean-up when the driver unloads. This function must be called before terminating the process to prevent memory leakage.

The define DB_TEST_ENVIRONMENT in mxdApiTypes.h should be set to 0 for the host environment to remove the PHY test board hardware-specific code.

The file mxdUtils.c contains utility functions and platform-specific debugging output function. The debugging output function has to be ported to the specific platform to generate logging and debugging output if desired. All output may be removed (this is the default) or enabled using the MXD_DEBUG define. 

mxdDiagnostics.h and mxdFwDownload.h contain prototypes of the useful API functions for diagnostics and PHY firmware download. mxdAPIInternal.h contains functions used internally by the API. These functions are not intended to be called directly by the host software.


Serdes API Usage and Instructions
---------------------------------
The files mxdHwSerdesCntl.h and mxdSerdes.h contain prototypes of the useful Serdes API functions and types needed for some Serdes features and diagnostic operations.  The Serdes API component is included by default with define MXD_ENABLE_SERDES_API. An option is available to exclude the Serdes API component to reduce the MXD API driver memory footprint. Normal PHY operation does not require the Serdes API.

The Serdes API component is in a separate Serdes sub-folder. The code in this folder is supplied under a BSD license. The Serdes API includes features for eye measurements, setting Tx/Rx polarity, injecting errors, and several other diagnostic features.  When the optional Serdes API component is added to the MXD API driver, it will increase the driver memory footprint.

This component is included by default with define MXD_ENABLE_SERDES_API. All files, including the Serdes sub-folder, must be included when building the driver.  To exclude the Serdes API component, remove the MXD_ENABLE_SERDES_API define and exclude the Serdes sub-folder files.

The file mxdSerdes.h contains Serdes API data structures for the eye measurements and training log.  When calling these operations, the APIs required a pre-allocated memory structure to store these data.

The Serdes API component requires dynamic memory allocation at run-time. The support for the standard C memory functions for malloc(), free() and realloc() are required.  


Notes about Memory Usage/Allocation
-----------------------------------
The MXD API uses only static memory allocation. However, the Serdes API requires dynamic memory allocation. If the serdes diagnostic functions are not needed, it is advised to exclude them by setting MXD_ENABLE_SERDES_API to 0  This will drastically reduce the memory footprint of the API and also make the memory usage completely deterministic.

The DbgBufSize is used in the string buffer for the debug message logging. If both the MXD_DEBUG and MXD_ENABLE_SERDES_API flags are enabled, the DbgBufSize needs to be larger than the eye diagram size, depending on the detail level, ranging from several 1000s to 200K bytes.

If the Serdes API is included, it's important to unload the driver with a call to mxdUnloadDriver() between new calls to mxdInitDriver() to free up dynamically allocated memory. 


API Errata
------------
- API version 10.8 and newer versions require Marvell 88X5113 A1 device
- Updating the EEPROM on the Marvell 88X5113 A1 device requires API version 10.8 and newer versions. The Z80 firmware version 1.0 will be required for updating the EEPROM 
- Z80 EEPROM image is necessary if the EEPROM is used on an MDIO port with an address other than 0


API revision history
------------------------
API version 11.2
- Fixed static code analysis reported inconsistency code in mxdSerdesPRBSDiagnostic() and mxdDbgPrint() (23603, 23623)
- Fixed the incorrect reporting of temperatures below 0 degree Celsius (23605)
- Added read/write access to the SerDes using the SerDes communication protocol, mxdSerdesIntWrite() (23619)
- Added support for CL-37 Auto-Neg for 1000BASE-X MXD_P1X mode, mxdCL37AutoNeg() (23627)
- mxdGetAutoNegAcquiredAbility() is updated and renamed to mxdGetAutoNegResolution() (23669)
- Fixed the handling of negative 8-bit signed values in Tx FFE using 2's complement, mxdGetTxFFE() (23629)
- Added BSD wrapper API to read the pCal and iCal status, mxdSerdesGetRxDFEStatus() (23639)
- Changed the eye API wrapper to use the SerDes eye data structure, mxdSerdesGetEye() (23641)
- Updated mxdSerdesGetEye to allow user to free up eye data structure, mxdSerdesGetEye() (23686)
- Added BSD wrapper API to launch and stop the SerDes continuous pCal tuning, mxdSerdesTune_pCal() (23644)
- Added detection for link status of single lane Repeater mode (23655)
- Fixed the port HW reset API to resets the digital and analog power, mxdPortReset() (23658)
- Added the build ID parameter in mxdGetAPIVersion API (23663)
- Resolved issue when switching between different speed mode without resetting the port (23664)
- mxdGetRsFecStatus is updated to read the requested line or host FEC lock info (23673)
- Fixed the variable names that were incorrectly swapped in the mxdGetRsFecPCSLaneMapping() (23676)
- Added code needed to support the 100G PMA Deep Loopback, mxdSetHostLoopback/mxdSetLineLoopback() (23677)
- Fixed the Tx FFE setting on non-zero lane offset in the mxdSetTxFFE() (23681)
- This API revision is tested with the following firmware versions:
     Serdes firmware version: 0x1064
     SBus firmware version: 0x101C
     Z80 EEPROM firmware version: 1.0;  Checksum:0x8AC0

API version 11.1
- Added support for 29.09G(MXD_P29P09LN, host-side only) for Gearbox mode. Refer to the mxdSampleSetUserMode sample function on the usage. (23584)
- This API revision is tested with the following firmware versions:
     Serdes firmware version: 0x1064
     SBus firmware version: 0x101C
     Z80 EEPROM firmware version: 1.0;  Checksum:0x8AC0

API version 11.0
- The MCD prefix is renamed to MXD. The name changed applies to all filenames, API functions, global and local variable names, and any reference to the MCD string. (23578)
- Fixed a bug with the loopback for the combined IEEE/Consortium operational modes; modes with the 3 letter suffix (23582)
- Corrected the line side deep PCS loopback FIFO reset (23583)
- This API revision is tested with the following firmware versions:
     Serdes firmware version: 0x1064
     SBus firmware version: 0x101C
     Z80 EEPROM firmware version: 1.0;  Checksum:0x8AC0

API version 10.8
- Added APIs for the Auto-Negotiation to check for completion, enabling and acquiring the Auto-Neg abilities (23563)
- Corrected the mcdLaneSoftReset API to issue a soft reset on a provided single lane 
- Resolved EEPROM update issue on X5113 A1 device with non-zero PHY(MDIO) address; requires Z80 firmware loaded to EEPROM (23573)
- Updated and added sample functions in mcdSample.c for EEPROM updates and Auto-Negotiation features
- Updated the Z80 loader image in the mcdZ80L64kB.h header file
- Corrected the temperature and voltage reading to use the provided MDIO port number (23575)
- This API revision is tested with the following firmware versions:
     Serdes firmware version: 0x1064
     SBus firmware version: 0x101C
     Z80 EEPROM firmware version: 1.0;  Checksum:0x8AC0

API version 10.7
- Updated several PCS and Repeater modes configuration with improved performances (23559)
- Added the Auto-Negotiation pause advertisement features (23555)
- Added more operational modes. The complete list of newly added operational modes is available in the mcdAPI summary.xlsx
- Host context assignment in the driver initialization is moved to the beginning of the mcdInitDriver() (23560)
- Updated code in several areas to be in compliance with the static code checker
- Corrected the PRBS pattern mismatched order in the MCD_PRBS_SELECTOR_TYPE enumeration
- This API revision is tested with the following firmware versions:
     Serdes firmware version: 0x1064
     SBus firmware version: 0x101C

API version 10.6
- Added support for the 88X5113 revision A1 device
- Added 48 new operational modes including 45 PCS and 5 Retimer modes. The complete list of operational modes is available in the mcdAPI summary.xlsx spreadsheet and MCD_FIXED_OP_MODE in mcdApiTypes.h
- Added new mode selection API, mcdSetUserFixedModeSelection, that provides an option to independently select individual operational modes for both host and line interfaces
- Added SerDes features including SerDes lane bit rate setting, iCal calibration and PRBS pattern diagnostic APIs
- This API revision is tested with the following firmware versions:
     Serdes firmware version: 0x1064
     SBus firmware version: 0x101C

API version 10.5
- Added 48 additional operational modes. The complete list of operational modes is available in the mcdAPI summary.xlsx spreadsheet and MCD_FIXED_OP_MODE in mcdApiTypes.h
- Updated the loopback diagnostic feature for all operation modes
- Updated the packet generator diagnostic feature for all Gearbox operation modes
- This API revision is tested with the following firmware versions:
     Serdes firmware version: 0x1064
     SBus firmware version: 0x101C

API version 10.4
- Added several operation modes. Refer to MCD_FIXED_OP_MODE in mcdApiTypes.h for the complete list of operation modes
- Added the square waves, 0s and 1s test patterns generation diagnostic feature
- This API revision is tested with the following firmware versions:
     Serdes firmware version: 0x105C
     SBus firmware version: 0x101C

API version 10.3
- First release version
- All APIs from the 10.1 and 10.2 preview releases are verified and tested
- Corrected EEPROM update in mcdUpdateEEPROMImage API to fix the incorrect image size
- Several APIs are updated and noted in the mcdAPI summary.xlsx
- Added sample functions for reading Eye diagram and Training log usage in mcdSample.c 
- Serdes API component is updated to 2.4.0 revision  

API version 10.2
- Preview release with the set mode selection and the link status checking
- Implemented the functions to the function prototypes defined in version 10.1
- Added sample source file with sample code to read the firmware image files, 
  driver initialization, mode settings, etc...
- Added the 'mcdAPI summary.xlsx' with a complete list of API functions and descriptions

API version 10.1
- Preview release. 
- Supports Marvell 88X5113 PHY. 
- Basic APIs support to initialize the driver
- Low level registers and SERDES access/control
- SERDES APIs support for SERDES additional features and diagnostic operations
- Images download to RAM and EEPROM
- Function prototypes for configuring/controlling features
